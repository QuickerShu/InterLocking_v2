・レイアウト上の全ての「てこ」と「着点」の組み合わせに対し、経路を探索する。
・「てこ」が属するTrackからスタートし、「着点」が属するTrackまでの経路を探索する。
・経路とは、端点と端点の繋がり、経由するTrack、分岐器やダブルクロス、ダブルスリップの状態のことである。
・「てこ」や「着点」を構成するTrackの端点は通常複数あるので、それら複数の端点を別々に扱って経路を探索するが、「てこ」「着点」が属するTrackを通過しない経路は排除する。
・端点にて、線路や接続線で接続された端点を探索、次の端点に移動、制約をクリアしていたらさらにそこに接続された端点を探索、これを繰り返し、「着点」に到達した場合は進路候補として記録、到達しなかった場合は候補から外す。
・経路は、track内での端点間の移動および、接続関係にあるtrackの端点との間の移動が許容されるものとする。
・ひとつのtrack内で最大2個の端点しか通れない制約を設ける。
・経由するtrackの情報も使うようにし、同じtrackを二度以上通過する経路が生じないようにする。
・分岐器やダブルクロス、ダブルスリップを通過する際はその開通方向も経路情報に含む。
・分岐器は特定の組み合わせの端点同士の移動以外は許可しない。以下の移動のみ許可する。
　分岐器：「0↔1（直進）」「0↔2（分岐）」
　ダブルクロス：「0↔1（直進）」「2↔3（直進）」「0↔3（分岐）」「1↔2（分岐）」
　ダブルスリップ：「0↔1（直進）」「2↔3（直進）」「0↔3（分岐）」「1↔2（分岐）」
例えば経路は以下のような繋がりになる。
　・直線1 端点1→経由：直線1→直線1 端点0→分岐器1 端点0→経由：分岐器1（分岐）→分岐器1 端点2→直線2 端点0→経由：直線2→直線2 端点1→・・・
